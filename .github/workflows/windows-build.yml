name: windows-build
on: [push]
jobs:
  build-windows:
    runs-on: windows-2025
    env:
      VCPKG_INSTALLATION_ROOT: ${{ github.workspace }}/vcpkg-mingw
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      remote_host: ${{ secrets.REMOTE_DEPLOY_HOST }}
    defaults:
      run:
        shell: bash
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Fetch tags
        run: git fetch --prune --unshallow --tags
      - name: submodules
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git submodule update --init --recursive --depth 1
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Download dependencies
        run: |
          git clone --depth 1 git@github.com:virtuoso/vcpkg-mingw.git
          cd vcpkg-mingw
          ./bootstrap-vcpkg.sh -disableMetrics
      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: |
            vcpkg-mingw/installed
            vcpkg-mingw/buildtrees
            vcpkg-mingw/downloads
          key: vcpkg-mingw-${{ hashFiles('vcpkg-mingw/vcpkg.json', 'vcpkg-mingw/ports/**', 'triplets/**') }}
          restore-keys: |
            vcpkg-mingw-
      - name: Build dependencies
        run: |
          cd vcpkg-mingw
          ./vcpkg install libpng:x64-mingw glfw3:x64-mingw glew:x64-mingw freetype:x64-mingw openal-soft:x64-mingw libogg:x64-mingw libvorbis:x64-mingw shaderc spirv-cross
      # - name: Install Ninja
      #   run: |
      #     curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
      #     mkdir ~/bin
      #     unzip ninja.zip -d ~/bin
      #     echo "${HOME}/bin" >> $GITHUB_PATH
      - name: configure
        run: |
          cmake --preset w32rel -DCMAKE_INSTALL_PREFIX:FILEPATH=./clap/${GITHUB_REF##*/}/w32rel
          cmake --preset w32test -DCMAKE_INSTALL_PREFIX:FILEPATH=./clap/${GITHUB_REF##*/}/w32test
          cmake --preset w32debug -DCMAKE_INSTALL_PREFIX:FILEPATH=./clap/${GITHUB_REF##*/}/w32debug
      - name: build
        run: |
          cmake --build build/rel --parallel 4 && cmake --install build/rel
          cmake --build build/test --parallel 4 && cmake --install build/test
          cmake --build build/debug --parallel 4 && cmake --install build/debug
      - name: test
        run: |
          ctest --test-dir build/test
          ctest --test-dir build/debug
      - name: upload-artifact-w32test
        uses: actions/upload-artifact@v4
        with:
          name: clap
          retention-days: 30
          path: ${{ github.workspace }}/build/test/demo/ldjam56/ldjam56.exe
      - name: upload-artifact-w32debug
        uses: actions/upload-artifact@v4
        with:
          name: clapdbg
          retention-days: 30
          path: ${{ github.workspace }}/build/debug/demo/ldjam56/ldjam56.exe
      - name: Deploy to server
        if: ${{ env.remote_host }}
        run: |
          echo "${{ secrets.REMOTE_DEPLOY_KEY }}" > ./ssh_id
          scp -o StrictHostKeyChecking=no -i ./ssh_id -r ./clap/${GITHUB_REF##*/} ${{ secrets.REMOTE_DEPLOY_USER}}@${{ secrets.REMOTE_DEPLOY_HOST }}:${{ secrets.REMOTE_DEPLOY_TARGET }}
